<app>
  <router onStarted={ started }>
    <nav>
      <div class="back"><img src="favicon.svg"></div>
      <div class="select">
        <select onchange={ select }>
          <option each={ plan in Object.entries( props.plans ) } value={ plan[0] } selected={ state.plan == plan[0] }>{ plan[0] }</option>
        </select>
      </div>
    </nav>

    <route path="{ this.props.root }#">
      <ul>
        <li each={ ( exercises, day ) in state.days } class={ day == state.day ? 'today' : '' }>
          <span class="day">{ props.weekdays[ day ] }</span>
          <span if={ exercises.length == 0 } class={ day == state.day ? 'day' : '' }>: Off</span>
          <span if={ day == state.day } class="day">, </span>
          <span if={ day == state.day } class="scream"> TODAY!</span>
          <ul>
            <li each={ exercise in exercises }>
              <a href="{ this.props.root }#/exercise/{ exercise.id }">{ exercise.name }</a>
              <span>&nbsp;</span>
              <span>({ exercise.sets.length == 0 ? 'various' : exercise.sets.join( '-' ) + ' sets' })</span>
            </li>
          </ul>
        </li>
      </ul>
    </route>

    <route path="{ this.props.root }#/exercise/:id">
      <exercise id={ route.params[0] } exercises={ this.props.exercises } root={ this.props.root }>
      </exercise>
    </route>
  </router>

  <script>
    import { getISODay } from 'date-fns';
    import { Router, Route } from '@riotjs/route';
    import Exercise from './exercise.riot';

    export default {
      components: { Router, Route, Exercise },
      onBeforeMount( props, state ) {
        state.days = {};
        state.day = getISODay( new Date() ) - 1;
        state.plan = '';

        let plan = window.localStorage.getItem( 'plan' ) || 'New Blood';

        if ( plan && props.plans[ plan ] ) {
          state.days = props.plans[ plan ].days;
          state.plan = plan;
        }

        document.addEventListener( 'visibilitychange', () => {
          this.update( { day: getISODay( new Date() ) - 1 } );
        } );
      },
      started() {
        if ( ! window.location.href.includes('#') ) {
          window.location.href += '#/';
        }
      },
      select( ev ) {
        let plan = ev.target.value;

        window.localStorage.setItem( 'plan', plan );

        this.update( { days: this.props.plans[ plan ].days } );
      }
    }
  </script>
</app>
